---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
    pod-security.kubernetes.io/enforce: privileged
  annotations: {}
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
  - apiGroups: ["extensions", "apps"]
    resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
    verbs: ["list", "get", "watch"]
  - apiGroups: ["extensions", "batch"]
    resources: ["cronjobs", "jobs"]
    verbs: ["list", "get", "watch"]
  - apiGroups: [""]
    resources:
      ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
    verbs: ["list", "get", "watch"]
  - apiGroups: ["linkerd.io"]
    resources: ["serviceprofiles"]
    verbs: ["list", "get", "watch"]
  - apiGroups: ["policy.linkerd.io"]
    resources:
      ["servers", "serverauthorizations", "authorizationpolicies", "httproutes"]
    verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
  - kind: ServiceAccount
    name: metrics-api
    namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
  - apiGroups: [""]
    resources: ["nodes", "nodes/proxy", "pods"]
    verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
  - apiGroups: [""]
    resources:
      ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
    verbs: ["list", "get", "watch"]
  - apiGroups: ["extensions", "apps"]
    resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
    verbs: ["list", "get", "watch"]
  - apiGroups: ["extensions", "batch"]
    resources: ["cronjobs", "jobs"]
    verbs: ["list", "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["list"]
  - apiGroups: ["tap.linkerd.io"]
    resources: ["*"]
    verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
  - kind: ServiceAccount
    name: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: tap
    namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: tap
    namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRVHRndFFaNUlnZXNZMnhRcnVzU1doVEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TURjeE5ERTFNREkwTWxvWApEVEkwTURjeE16RTFNREkwTWxvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS0hyVXZQaXVNMDAzU3RLVE5YY2tEN0gKMlVaclZBaUhWVlczUDk4cmRqeVV0QUZqYVRkOHg0eU5SV3VOZ0VkOUUxQnhQd2pWRmNmTjRJdkF6ODZGMXZPLwpCUDFwR3RYelAvVmM4bXRueGJWaUZmaWxXZUdTRWZKejIybS9wVkkwMWEzUkhIdllHL0xsUHgzbFJ0N2tyQmQzCkNQVEk5Zy9lbksxdnh2NC91TUZnYzhHQTUzZVZVWnhKalZMYVpDazdsUnI2aElkcVVtc2o1d0Vwak9DbmVEWW0KMmRlb0ZGY3JOaUFlSjlNbDJLV2JaTzN2NXZyVm1aQzc2MEF1Rm5WV0NKQjZEZ0ZyM3Fvd2NaVTJ3UWJVOEJZbwp4NXRCWlVpVEZONUhsQ1ZDUkRzd0NzT1Vyc0JMdjZGM3FOU0hhKzMvby9aT3NzSEVxaU56Z1dMKzdJYytkRnNDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBQmJsSFBVMnQ0S05FK2xrVTFNRm1vSnlpbkxaMFRWCk0zSmorNkplVnRGaG4vYW8rbzhNWlRRaDhUZXROS3FobnRZNGdKcnROSkprMy9SZk9rMHhjWmJPVmtpZXlZSVkKNlVTQzd5d2cvTjVtenk5U2Q4bUdZZmlaNEdoR1llUjI2NjJhMTRUN1JKWkZ2TzNjUnhERlZqSmFmZS9LaUpXOAo2Wjl4ZTM3TUwyK1ZRQVBWQXV0VG5sMEQzZ1VmbnF5UzVIckc3WTF3RDA4MFBFOEVWb21LaFRoNTU4dy9VMDRLCnlDcDlPRmRkUWc2OSt0bXFJRm9TMnU4WTBQTm1XbzgvT0I4a3NMNWczTWg3ZUFBZU1ab2NRUlpIOWwyaVdzZy8KeHI2TVRZaXg1TTRmM3paK2lQUU5EVng4UXZEU0NyV1J2NW9yNkxXK1dqY25HbVh1bEdaYXJzZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBb2V0UzgrSzR6VFRkSzBwTTFkeVFQc2ZaUm10VUNJZFZWYmMvM3l0MlBKUzBBV05wCk4zekhqSTFGYTQyQVIzMFRVSEUvQ05VVng4M2dpOERQem9YVzg3OEUvV2thMWZNLzlWenlhMmZGdFdJVitLVloKNFpJUjhuUGJhYitsVWpUVnJkRWNlOWdiOHVVL0hlVkczdVNzRjNjSTlNajJEOTZjclcvRy9qKzR3V0J6d1lEbgpkNVZSbkVtTlV0cGtLVHVWR3ZxRWgycFNheVBuQVNtTTRLZDROaWJaMTZnVVZ5czJJQjRuMHlYWXBadGs3ZS9tCit0V1prTHZyUUM0V2RWWUlrSG9PQVd2ZXFqQnhsVGJCQnRUd0ZpakhtMEZsU0pNVTNrZVVKVUpFT3pBS3c1U3UKd0V1L29YZW8xSWRyN2YrajlrNnl3Y1NxSTNPQll2N3NoejUwV3dJREFRQUJBb0lCQUVkMEtybzNyaWZZa1ZWKwpSMlFGSHA2bDRNdERwK1RQbkNma1kwcGZ5cUMzV3F4V0syTnlMRGxwU2w1SkpuZmx5VFV4bElpWVNERlJPQ3RVCkhpQmNUZHhveXBIdDVRclBlc1VUakdNN2V6TXRJdGNFV1NMRExDcGJXRk5WWUdaanJIdzFFS1hTVzVzWDhYK0cKNDN5UFd5Wkx3R2NObkJDcXcyZUNNVVdYNXpkbVhsb2w5TnY0V3psYy9qSndGUzdVNEZEQzl0VEpGdE9YUEMzUAp1R05NbmgvTm9CRHcyeVI4dlBXcVBBd0poMEh1dExmY0dkelRubkR2YXJIczRvSEFTRW1iOU1aOEhtOUl3cDJyClFCMDBpT0hQd0hQNG5idnpQeGFCYU50ZHZLT282Q2pXZU9qUHE1WFFNUkdUakxPMWJ0NWwvS0IxMlNiWWxwMXkKRnVUZ2laa0NnWUVBeVRmcEVMVngxdnNwTFdUM0lzakNTQytFTm5JWnErcnJDRFZIUU1Ddkw4MVU3VmJVTHVxTwpyQy9FQ3hwM0VZV0xDenhhcVBEN3BMeDhwb0RVNWliZkJkWDl6MUh1d0M5clo2VFVvMWZ1RzJFQ2xIMjBUZjZhCk90MG9lWUZqeWs0dkZINWpEVkRETzU2VkhST2c2SnI0VHlGeC9va0lGUGxGMmlGUFVyeWVsSFVDZ1lFQXpnQnMKcVFXem90WVgxak9zQ3JXaXNKRUtINGFKcjNHa2tpcTJqekdzVnlLTWNHeUlEZGpRMG1Vem1kc0JLSElUUDNxUwpQbnRSS3k2MmVBTnl2Nkx0L3E4bkt2Ti9UbDlmTi9iTEJ6andMWEZkdTU2MHB0NExJVWZNUkVOR0ovdHJHSENxCjlvMFZma0RkMURsMGdtMlMzVXkwNFVYWGdRNXdmUXJqUDFZV2k0OENnWUVBaDdhb0FWYi9vd25mYWZpUkh1cmMKN3FidHUzTVZrWGh1Y1NqT0dBUmRwQllQVTh5ZWE4NVQwQnFmVlFYU2pRVFBGUkx0NnNndVVadTNUdTNScWpGSgpkcnd2NWFiVEt0aFF6cVREcmkvZUxxVXRnazJPVUpTS0hXMlFvUEwrQlRMYVdpNHNUSXpPUU9YaW1Ldm1lVHdjCmdmS0MyalErT1RjdlA4SDdxRWdEaFFrQ2dZQUsrNDdQZkJSVnJDQmROU2dJOGlJWVU4TThad25VSnJUbGJnMkoKbU5aZFZ1UXg0amRtdFpaOGdSUzlNU1hncUNSS2tCaFg2Rzh0WkRJcU45VFlUckZ0a0p6Lzl6ZGtVRVZkVUhVRwpqNHlPZjZyRm8vSnhxd2pnMzFrT2twK2M1aFNSbXdBaVlPY3ljZmJocDZhRWhaNzgyV2dUVW92b3Y0SlR5RTdSClE1KzBGUUtCZ1FDLzRIdkptSmZGTFcvYTFxUEJXT25kL25kWkVQdXRFQXFBc1NvWDBGTVluM1QxKzFZdXh1U3gKT3hOVkVhNmRLaVZpRTdIcnp4bnZ4UnEwbWJtV3VTbjBYdDhVSEFBcVd0MXpja2dHMjBFZzBvYkVPa3A0aUtCbwpHY0JxTnhKbjVCK2V6Q0NlYmJRZHRXUmltUnFYa1ZzNTlScW5oN0U2YnNZQm1MNEI5c3FTQ3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRVHRndFFaNUlnZXNZMnhRcnVzU1doVEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TURjeE5ERTFNREkwTWxvWApEVEkwTURjeE16RTFNREkwTWxvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS0hyVXZQaXVNMDAzU3RLVE5YY2tEN0gKMlVaclZBaUhWVlczUDk4cmRqeVV0QUZqYVRkOHg0eU5SV3VOZ0VkOUUxQnhQd2pWRmNmTjRJdkF6ODZGMXZPLwpCUDFwR3RYelAvVmM4bXRueGJWaUZmaWxXZUdTRWZKejIybS9wVkkwMWEzUkhIdllHL0xsUHgzbFJ0N2tyQmQzCkNQVEk5Zy9lbksxdnh2NC91TUZnYzhHQTUzZVZVWnhKalZMYVpDazdsUnI2aElkcVVtc2o1d0Vwak9DbmVEWW0KMmRlb0ZGY3JOaUFlSjlNbDJLV2JaTzN2NXZyVm1aQzc2MEF1Rm5WV0NKQjZEZ0ZyM3Fvd2NaVTJ3UWJVOEJZbwp4NXRCWlVpVEZONUhsQ1ZDUkRzd0NzT1Vyc0JMdjZGM3FOU0hhKzMvby9aT3NzSEVxaU56Z1dMKzdJYytkRnNDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBQmJsSFBVMnQ0S05FK2xrVTFNRm1vSnlpbkxaMFRWCk0zSmorNkplVnRGaG4vYW8rbzhNWlRRaDhUZXROS3FobnRZNGdKcnROSkprMy9SZk9rMHhjWmJPVmtpZXlZSVkKNlVTQzd5d2cvTjVtenk5U2Q4bUdZZmlaNEdoR1llUjI2NjJhMTRUN1JKWkZ2TzNjUnhERlZqSmFmZS9LaUpXOAo2Wjl4ZTM3TUwyK1ZRQVBWQXV0VG5sMEQzZ1VmbnF5UzVIckc3WTF3RDA4MFBFOEVWb21LaFRoNTU4dy9VMDRLCnlDcDlPRmRkUWc2OSt0bXFJRm9TMnU4WTBQTm1XbzgvT0I4a3NMNWczTWg3ZUFBZU1ab2NRUlpIOWwyaVdzZy8KeHI2TVRZaXg1TTRmM3paK2lQUU5EVng4UXZEU0NyV1J2NW9yNkxXK1dqY25HbVh1bEdaYXJzZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
    resourceNames: ["linkerd-config"]
  - apiGroups: [""]
    resources: ["namespaces", "configmaps"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["serviceaccounts", "pods"]
    verbs: ["list"]
  - apiGroups: ["apps"]
    resources: ["replicasets"]
    verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["clusterroles", "clusterrolebindings"]
    verbs: ["list"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["list"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources:
      ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
    verbs: ["list"]
  - apiGroups: ["linkerd.io"]
    resources: ["serviceprofiles"]
    verbs: ["list"]
  - apiGroups: [""]
    resources: ["nodes", "pods", "services"]
    verbs: ["list"]
  - apiGroups: ["apiregistration.k8s.io"]
    resources: ["apiservices"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: web
    namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
  - kind: ServiceAccount
    name: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: web
    namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
    - name: http
      port: 8085
      targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.13.5
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b
        linkerd.io/created-by: linkerd/helm stable-2.13.5
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux

      containers:
        - args:
            - -controller-namespace=linkerd
            - -log-level=info
            - -log-format=plain
            - -cluster-domain=cluster.local
            - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
            - -enable-pprof=false
          image: cr.l5d.io/linkerd/metrics-api:stable-2.13.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9995
            initialDelaySeconds: 10
          name: metrics-api
          ports:
            - containerPort: 8085
              name: http
            - containerPort: 9995
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9995
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            runAsUser: 2103
            seccompProfile:
              type: RuntimeDefault
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: metrics-api
  requiredAuthenticationRefs:
    - group: policy.linkerd.io
      kind: MeshTLSAuthentication
      name: metrics-api-web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: MeshTLSAuthentication
metadata:
  namespace: linkerd-viz
  name: metrics-api-web
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  identityRefs:
    - kind: ServiceAccount
      name: web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kubelet
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  # Ideally, this should be restricted to the actual set of IPs kubelet uses in
  # a cluster. This can't easily be discovered.
  networks:
    - cidr: "0.0.0.0/0"
    - cidr: "::/0"
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
    - name: admin-http
      port: 9090
      targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.13.5
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.13.5
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - args:
            - --log.level=info
            - --log.format=logfmt
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/data
            - --storage.tsdb.retention.time=6h
          image: prom/prometheus:v2.43.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          name: prometheus
          ports:
            - containerPort: 9090
              name: admin-http
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /etc/prometheus/prometheus.yml
              name: prometheus-config
              subPath: prometheus.yml
              readOnly: true
      securityContext:
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: prometheus
      volumes:
        - name: data
          emptyDir: {}
        - configMap:
            name: prometheus-config
          name: prometheus-config
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: prometheus-admin
  requiredAuthenticationRefs:
    - kind: ServiceAccount
      name: metrics-api
      namespace: linkerd-viz
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
    - name: grpc
      port: 8088
      targetPort: 8088
    - name: apiserver
      port: 443
      targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.13.5
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 5bc3def328b7f8e252ecd437eeee4d848a33ab6924fd0bc3ea9c25584659100d
        linkerd.io/created-by: linkerd/helm stable-2.13.5
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux

      containers:
        - args:
            - api
            - -api-namespace=linkerd
            - -log-level=info
            - -log-format=plain
            - -identity-trust-domain=cluster.local
            - -enable-pprof=false
          image: cr.l5d.io/linkerd/tap:stable-2.13.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9998
            initialDelaySeconds: 10
          name: tap
          ports:
            - containerPort: 8088
              name: grpc
            - containerPort: 8089
              name: apiserver
            - containerPort: 9998
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9998
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2103
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /var/run/linkerd/tls
              name: tls
              readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap
      volumes:
        - name: tls
          secret:
            secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-api
  requiredAuthenticationRefs:
    - group: policy.linkerd.io
      kind: NetworkAuthentication
      name: kube-api-server
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
  - kind: ServiceAccount
    name: tap-injector
    namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRRFdXN0RvbU1GNWU1bllmbkFzZGJrVEFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TURjeApOREUxTURJME0xb1hEVEkwTURjeE16RTFNREkwTTFvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQUsrZDhSa1l3VEJTQktDRUxraVpuUFdLbnA3UXpndWVQMEgxdmdoalNkUXdkZENjRmRTN0cxckJBbWdHUTBsTwpWRjlwZXBSY1o4czFyZ01oWGxtNWc2RmNBTG81UDRHUi8rZDd1Qm45OUNnYjJEQS8rOC9NV3ZiQUdiakc0bTI1CnNLc2ZWVmplNTdjVVFTb3g1Ky9jVGZrNnlVVGZtRWF3bG9vRFBhVXJqdWdMTWhpNHJkTlBUSFA5UHpOQk1KejUKNHZlWWk4RUViNEo4RnVObytRODY0TGY3cENINFlmT2VRWEh0Ni96a2ROa3RrV0FvYWdodTk2VkYxN28xdXlFOQpmTTZXQ0kxN21OUlhXVXNBdXRqT3BjYXZONTZrSEI3R1AzMDVPczNrWWNRNTdYNCtmcHl1andMUyswMzBPWUF1CjBzQ252b3ZDQWRFNzFDS0NlcGFhQThjQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBRTJvaUcvOWp3V2k3QlpBT1E0MDdjenoxMFkzaVJvOG1zWTBmSXZ6QmRyMk9jN2RyTTZaT2RGQzh2SEcKaVVaSmwrbU1aOE1HZ0ZrV0I4TzZrT1BmSmRsWm11UFd1NDcvU1VVZWxVbkl2NU8yK3NXTDVYZ0dhUm9jVWdIZQpZN3U2WWpaTTFuVGdta1A3ckM2VXg4eHZ6OXhDR1lHRFdQZlc1VG5kWTNHaEZZdWxoNHd6RzZaeGtDcXI0ZEhhCkVTU01Sb1did2Z4RjlYRS9IVm5kUzZJd1hmTkZrTHRVdzBoSlR1dWpzWmtXWGFIa1NJR1gwbEpka3MxaWswZHkKNmZtRnRoWnAzSkR2TFJZS3NveDVoNzdHZ3ozSCtnZFV5cUYwM1BKb2V1dXBQb3c5ZjNjc292MmxKczBENFhVegoxVEdiQ1dTb2szYmJhWG5OaDluODRpcWdteFk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBcjUzeEdSakJNRklFb0lRdVNKbWM5WXFlbnRET0M1NC9RZlcrQ0dOSjFEQjEwSndWCjFMc2JXc0VDYUFaRFNVNVVYMmw2bEZ4bnl6V3VBeUZlV2JtRG9Wd0F1amsvZ1pILzUzdTRHZjMwS0J2WU1ELzcKejh4YTlzQVp1TWJpYmJtd3F4OVZXTjdudHhSQktqSG43OXhOK1RySlJOK1lSckNXaWdNOXBTdU82QXN5R0xpdAowMDlNYy8wL00wRXduUG5pOTVpTHdRUnZnbndXNDJqNUR6cmd0L3VrSWZoaDg1NUJjZTNyL09SMDJTMlJZQ2hxCkNHNzNwVVhYdWpXN0lUMTh6cFlJalh1WTFGZFpTd0M2Mk02bHhxODNucVFjSHNZL2ZUazZ6ZVJoeERudGZqNSsKbks2UEF0TDdUZlE1Z0M3U3dLZStpOElCMFR2VUlvSjZscG9EeHdJREFRQUJBb0lCQVFDQnhVaGZyemN5cWFqWgpwRk0vT3FRTm5YMVJCaUw3MnRnTHViZlBJdTl2YU0vbWN6QitualM4ZjF0ejJ3emxvb2dlYVNjM2NvRVFYSDVWCnVkYXFucmR5Q1RaUVpmVlRuYnRvSnJnSUhPektwcWkrSHNuSTU4MWdBTndBK3BaZlZwUUNINGxGdnBHamE4Z3IKa2UwK0JhRm94ZFBzblAwOVgwZ2VlLzZWaXZaeTZIbWlwOFY2MDhMZjg5a09lZ1FnS29rWitzTWwwMHNhVm9ORAp4a1V4NDIvZlBOaUEvS1VwWnNVNXJOK1BNdEhrWjlLa0FBaWgybURzalpTWHV6Qjg4MkVVY25HRmlqSUZnYi9QCkxmTHRqRU1wUnZHa2cycm5mdXVhakJPbE9nUW1rbnlPK25aZnFudHBoeDU2YXlEbFBNSzdvKzAyRUl4ZkxmUTYKdnRObkswcUJBb0dCQU5OWndvdEdJL09xdzd6blZTaDl0a1N3cnpVRnJPOUhnNkgzUk9vZGhuYTNQUzB1c04vUQpnUDZrTDJXSHE2OEZUaFFTZFFBeGlHREp3MU03ZEVoK3lqNG51c2FxcFpHb29qL2EzMTFsazZVRDZ2dkh6VXZhCnFsL3I3TlE0U0Y1YXNvUHNPTVRsckJ0OHE2c1JnU1cyR2p4NXN1S2w0M1lNQldJRE5nTS8wcFBSQW9HQkFOUzMKbzA5aXhIZnBwWGdNMmh1N293OGxLa1M4QnRRZnorUjl6Smt3SHU2bXRLZWpGNXFpRnRHdE84MDFQd2FlanRPKwpqcjY1ejR4RkFsVHUvazBrNUtJdVpha29SdXdnekVSZ3oremd2bDh2Y0l4aDhmSUUxWUlaanFMQmJ3MWVTWUZKCmdEc3h3Q1ZrMjdpRG5Va3kvZnUvdUxLU0NzU2I1NVF1ellYS25md1hBb0dCQUk0ZjgwSkRGWlFiUm10MnlQNWsKb3poSDlGcGNpYkdTenNNUkMrZS9tUmVtRzE2UjRtRnZ6Zjd2Ryt4VHNyRU1pVGZZUFpPMnUzWVMxK1hWdWxteAo0WUN3cU5wR0VQY0ZocTRZR2xLdEp2ODF4a1F3VlM3b1NlQWRQL0pxTXNnNGg0bE5SZE9xZXZVMC9pQVlzbGRRCndRM2Y3TnFiSVgzVmtaMGFlYXp2czBTeEFvR0JBTUZ3MWxTRkR3RzFPa0szL1VpbkZCdmJ3bHFMV3ZKZ2s1L0kKUHQwNEE0a25sTFcxL09za1ovZjV2NTVYdzU3elpoTnRBVWEwbHVlS2docFcxRyszRXl2aFlaVzVDUFlHeFh1UgpSc1MxaEtudTdEemRmVGFINnRuTEFBbEdPd1UvTHowaGFEbHNmcjRDd0VWRmV5MXI3OGlXaXhIbytWM2VJWFNDCk0yaHQzOG0xQW9HQUVmSUl1WlM3U25aSGQ5bDNFZVAybGJOb1lKZmI1MVJwT0JDeFlOQmYzN05WODdKR1lDaGoKTktrazBpMXY2N1lLTUVjUnFtOHZSM3Y3Q2RBc29BMHc4NUZiQmllc0JGQUprMVRTVlRwWW1ycUpyTHplSVltWQpIYytYeCt6dGU2eXZTbTZUekJMUW5ITVJ2ZEphZDBKbkRlMFBUbk84STNOeGFBQmhCdFFTSjAwPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
  - name: tap-injector.linkerd.io
    clientConfig:
      service:
        name: tap-injector
        namespace: linkerd-viz
        path: "/"
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRRFdXN0RvbU1GNWU1bllmbkFzZGJrVEFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TURjeApOREUxTURJME0xb1hEVEkwTURjeE16RTFNREkwTTFvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQUsrZDhSa1l3VEJTQktDRUxraVpuUFdLbnA3UXpndWVQMEgxdmdoalNkUXdkZENjRmRTN0cxckJBbWdHUTBsTwpWRjlwZXBSY1o4czFyZ01oWGxtNWc2RmNBTG81UDRHUi8rZDd1Qm45OUNnYjJEQS8rOC9NV3ZiQUdiakc0bTI1CnNLc2ZWVmplNTdjVVFTb3g1Ky9jVGZrNnlVVGZtRWF3bG9vRFBhVXJqdWdMTWhpNHJkTlBUSFA5UHpOQk1KejUKNHZlWWk4RUViNEo4RnVObytRODY0TGY3cENINFlmT2VRWEh0Ni96a2ROa3RrV0FvYWdodTk2VkYxN28xdXlFOQpmTTZXQ0kxN21OUlhXVXNBdXRqT3BjYXZONTZrSEI3R1AzMDVPczNrWWNRNTdYNCtmcHl1andMUyswMzBPWUF1CjBzQ252b3ZDQWRFNzFDS0NlcGFhQThjQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBRTJvaUcvOWp3V2k3QlpBT1E0MDdjenoxMFkzaVJvOG1zWTBmSXZ6QmRyMk9jN2RyTTZaT2RGQzh2SEcKaVVaSmwrbU1aOE1HZ0ZrV0I4TzZrT1BmSmRsWm11UFd1NDcvU1VVZWxVbkl2NU8yK3NXTDVYZ0dhUm9jVWdIZQpZN3U2WWpaTTFuVGdta1A3ckM2VXg4eHZ6OXhDR1lHRFdQZlc1VG5kWTNHaEZZdWxoNHd6RzZaeGtDcXI0ZEhhCkVTU01Sb1did2Z4RjlYRS9IVm5kUzZJd1hmTkZrTHRVdzBoSlR1dWpzWmtXWGFIa1NJR1gwbEpka3MxaWswZHkKNmZtRnRoWnAzSkR2TFJZS3NveDVoNzdHZ3ozSCtnZFV5cUYwM1BKb2V1dXBQb3c5ZjNjc292MmxKczBENFhVegoxVEdiQ1dTb2szYmJhWG5OaDluODRpcWdteFk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
    failurePolicy: Ignore
    admissionReviewVersions: ["v1", "v1beta1"]
    reinvocationPolicy: IfNeeded
    rules:
      - operations: ["CREATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
    - name: tap-injector
      port: 443
      targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: aa396350e46adeaaef51df8964f91324964297345c79ee216b9ce22c1ce9f515
        linkerd.io/created-by: linkerd/helm stable-2.13.5
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux

      containers:
        - args:
            - injector
            - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
            - -log-level=info
            - -log-format=plain
            - -enable-pprof=false
          image: cr.l5d.io/linkerd/tap:stable-2.13.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9995
            initialDelaySeconds: 10
          name: tap-injector
          ports:
            - containerPort: 8443
              name: tap-injector
            - containerPort: 9995
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9995
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2103
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /var/run/linkerd/tls
              name: tls
              readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap-injector
      volumes:
        - name: tls
          secret:
            secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-injector-webhook
  requiredAuthenticationRefs:
    - group: policy.linkerd.io
      kind: NetworkAuthentication
      name: kube-api-server
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  # Ideally, this should be restricted to the actual set of IPs the kubelet API
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
    - cidr: "0.0.0.0/0"
    - cidr: "::/0"
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5

    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
    - name: http
      port: 8084
      targetPort: 8084
    - name: admin-http
      port: 9994
      targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.13.5
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.13.5
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - args:
            - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
            - -cluster-domain=cluster.local
            - -grafana-addr=ktechdevops.grafana.net
            - -controller-namespace=linkerd
            - -log-level=info
            - -log-format=plain
            - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
            - -enable-pprof=false
          image: cr.l5d.io/linkerd/web:stable-2.13.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9994
            initialDelaySeconds: 10
          name: web
          ports:
            - containerPort: 8084
              name: http
            - containerPort: 9994
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9994
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2103
            seccompProfile:
              type: RuntimeDefault
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
    - name: POST /api/v1/StatSummary
      condition:
        method: POST
        pathRegex: /api/v1/StatSummary
    - name: POST /api/v1/TopRoutes
      condition:
        method: POST
        pathRegex: /api/v1/TopRoutes
    - name: POST /api/v1/ListPods
      condition:
        method: POST
        pathRegex: /api/v1/ListPods
    - name: POST /api/v1/ListServices
      condition:
        method: POST
        pathRegex: /api/v1/ListServices
    - name: POST /api/v1/SelfCheck
      condition:
        method: POST
        pathRegex: /api/v1/SelfCheck
    - name: POST /api/v1/Gateways
      condition:
        method: POST
        pathRegex: /api/v1/Gateways
    - name: POST /api/v1/Edges
      condition:
        method: POST
        pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
    - name: POST /api/v1/query
      condition:
        method: POST
        pathRegex: /api/v1/query
    - name: GET /api/v1/query_range
      condition:
        method: GET
        pathRegex: /api/v1/query_range
    - name: GET /api/v1/series
      condition:
        method: GET
        pathRegex: /api/v1/series
